---
layout: post
title: Introducing Koko
date: '2015-08-18 19:19:59'
---

Over the last year while working for [Blue Systems](http://www.blue-systems.com/), we created an application for browsing Images. The aim was to automatically categorize photos into albums and just have an easy way to browse your images. Image manipulation and viewing wasn't the goal.

![](/blog/images/2015/08/18/hi128-apps-koko.png)

This resulted in the creation of [Koko](https://projects.kde.org/projects/playground/graphics/koko), which is named after [Koko the Gorilla](https://en.wikipedia.org/wiki/Koko_(gorilla)). 

### Photos

* Image of the gorilla!
* We need maybe 2-3 photos of Koko

### Plasma Phone

When we started working on the Plasma Phone, one of the requirements was to have a way to browse your photos. Koko seemed like an appropriate choice given that it used most of the KDE technologies.

`$ koko --phone`

![]()

* Default appearance!
* With a photo!

The interface is fairly similar to the desktop interface. This is one of the first applications where we experimented with switching the application's interface based on the screen size. In the end we just went for an environment variable - `PLASMA_PLATFORM = phone`.

### Specific Technologies

The entire UI is done in QML. This is one of the few applications that has tried this path. We had some problems but writing delegates and prototyping was much easier.

The backend code uses C++ and on the desktop can use Baloo (File Indexer) to look for images, though it does have a fallback. Specially since Baloo has not been ported to the phone.

#### Geolocation

One of the fun things to implement was mapping the latitude and longitude in an image to city. We wanted this process to be fast, reliable, and not communicate with any external services.

Koko internally has a list of cities which have a population greater than 10,000. It does the entire lookup offline.

### Different prototypes

It took a while for us to settle on the current UI. In the process we did experiment with a few others, and even focused on tagging in the middle. This resulted in some pretty neat QML components for tagging. Hopefully these will be useful in other projects.

* GIF of Image Tagging Filter
![]()


The code can be found on [KDE's git servers](https://projects.kde.org/projects/playground/graphics/koko/repository). It is already shipped on the Plasma Phone [base image](http://plasma-mobile.org/nexus-5/).
